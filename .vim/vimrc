  " NeoBundle init {{{
  if has('vim_starting')
    set nocompatible
    set runtimepath+=~/.vim/bundle/neobundle.vim/
  endif
  call neobundle#begin(expand('~/.vim/bundle/'))
  NeoBundleFetch 'Shougo/neobundle.vim'
  NeoBundleCheck
  "}}}

  " functions {{{
  "

  function! Preserve(command) "{{{
    " preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " do the busine:
    execute a:command
    " clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
  endfunction "}}}
  function! StripTrailingWhitespace() "{{{
    call Preserve("%s/\\s\\+$//e")
  endfunction "}}}
  function! EnsureExists(path) "{{{
    if !isdirectory(expand(a:path))
      call mkdir(expand(a:path))
    endif
  endfunction "}}}

  function! MyFoldText() " {{{
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
    return line . ' … ('. foldedlinecount . ')' . repeat(" ",fillcharcount)
  endfunction " }}}

  "}}}

  " base configuration {{{
  set foldtext=MyFoldText()                           "pretty folding
  set timeoutlen=500                                  "mapping timeout
  set ttimeoutlen=50                                  "keycode timeout

  set mouse=a                                         "enable mouse
  set mousehide                                       "hide when characters are typed
  set history=1000                                    "number of command lines to remember
  set ttyfast                                         "assume fast terminal connection
  set viewoptions=folds,options,cursor,unix,slash     "unix/windows compatibility
  set encoding=utf-8                                  "set encoding for text
  set hidden                                          "allow buffer switching without saving
  set autoread                                        "auto reload if file saved externally
  set fileformats+=mac                                "add mac to auto-detection of file format line endings
  set nrformats-=octal                                "always assume decimal numbers
  set showcmd
  set showfulltag
  set modeline
  set modelines=5

  " whitespace
  set backspace=2                                     ":set backspace=indent,eol,start
  set autoindent                                      "automatically indent to match adjacent lines
  set expandtab                                       "spaces instead of tabs
  set smarttab                                        "use shiftwidth to enter tabs
  let &tabstop=2                                      "number of spaces per tab for display
  let &softtabstop=2                                  "number of spaces per tab in insert mode
  let &shiftwidth=2                                   "number of spaces when indenting
  set nolist                                          "highlight whitespace
  set listchars=tab:│\ ,trail:•,extends:❯,precedes:❮
  set shiftround
  set linebreak
  let &showbreak=' ↪ '
  set scrolloff=1                                     "always show content after scroll
  set scrolljump=5                                    "minimum number of lines to scroll
  set display+=lastline

  set splitbelow
  set splitright

  " disable sounds
  set noerrorbells
  set novisualbell
  set t_vb=

  " searching
  set hlsearch                                        "highlight searches
  set incsearch                                       "incremental searching
  set ignorecase                                      "ignore case for searching
  set smartcase                                       "do case-sensitive if there's a capital letter
  set grepprg=ag
  set grepprg=ag\ --nogroup\ --nocolor
  set grepformat=%f:%l:%c:%m

  " vim file/folder management {{{
    " persistent undo
    set undofile
    set undodir=~/.vim/cache/undo

    " backups
    set backup
    set backupdir=~/.vim/cache/backup

    " swap files
    set directory=~/.vim/cache/swap
    set noswapfile

    call EnsureExists('~/.vim/cache')
    call EnsureExists(&undodir)
    call EnsureExists(&backupdir)
    call EnsureExists(&directory)
  "}}}

  let mapleader = " "
  let g:mapleader = " "
"}}}

" ui configuration {{{
  set showmatch                                       "automatically highlight matching braces/brackets/etc.
  set matchtime=2                                     "tens of a second to show matching parentheses
  set number
  " set relativenumber
  set lazyredraw
  set laststatus=2
  set noshowmode
  set foldenable                                      "enable folds by default
  set foldmethod=syntax                               "fold via syntax of files
  set foldlevelstart=99                               "open all folds by default
  let g:xml_syntax_folding=1                          "enable xml folding

  set nocursorline

  set fillchars+=vert:\                               "space instead of | as vertical delimiter

  " Autocmd
  augroup vimrcEx
    autocmd!

    autocmd BufWritePre * :call StripTrailingWhitespace()
    autocmd BufRead,BufNewFile *.tpl,*tmpl set filetype=smarty

    " When editing a file, always jump to the last known cursor position.
    " Don't do it for commit messages, when the position is invalid, or when
    " inside an event handler (happens when dropping a file on gvim).
    autocmd BufReadPost *
      \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal g`\"" |
      \ endif

    " Set syntax highlighting for specific file types
    autocmd BufRead,BufNewFile *.md set filetype=markdown

    " Enable spellchecking for Markdown
    autocmd FileType markdown setlocal spell

    " Automatically wrap at 80 characters for Markdown
    autocmd BufRead,BufNewFile *.md setlocal textwidth=80

    " Automatically wrap at 72 characters and spell check git commit messages
    autocmd FileType gitcommit setlocal textwidth=72
    autocmd FileType gitcommit setlocal spell

    " Allow stylesheets to autocomplete hyphenated words
    autocmd FileType css,scss,sass setlocal iskeyword+=-

    autocmd BufNewFile,BufRead *.hamlc setfiletype haml
    autocmd FileType php setlocal shiftwidth=2 tabstop=2
    autocmd FileType php setlocal noexpandtab
    autocmd FileType gitcommit setlocal nonumber norelativenumber
  augroup END

  " Make the 81st column stand out by Damian Conway
  highlight ColorColumn ctermbg=black
  call matchadd('ColorColumn', '\%81v', 100)
"}}}

" plugin/mapping configuration {{{
  " core {{{
    NeoBundle 'matchit.zip'
    NeoBundle 'bling/vim-airline' "{{{
      let g:airline_right_sep = ''
      let g:airline_left_sep = ''
      let g:airline#extensions#whitespace#trailing_format = 'trail[%s]'
      let g:airline#extensions#whitespace#mixed_indent_format = 'mix[%s]'
    "}}}
    NeoBundle 'tpope/vim-surround' "{{{
      let g:surround_100 = "do \r\nend" "surround letter 'd' for do .. end
    "}}}
    NeoBundle 'tpope/vim-repeat'
    NeoBundle 'tpope/vim-eunuch'
    NeoBundle 'tpope/vim-unimpaired'
    NeoBundle 'Shougo/vimproc.vim', {
      \ 'build': {
        \ 'mac': 'make -f make_mac.mak',
        \ 'unix': 'make -f make_unix.mak',
        \ 'cygwin': 'make -f make_cygwin.mak',
        \ 'windows': '"C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC\bin\nmake.exe" make_msvc32.mak',
      \ },
    \ }
  "}}}

  " web {{{
    NeoBundleLazy 'tpope/vim-markdown', {'autoload':{'filetypes':['markdown']}} "{{{
      au BufNewFile,BufRead *.md,*.note  setf markdown
      let g:markdown_fenced_languages = ['css', 'erb=eruby', 'javascript', 'js=javascript', 'json=javascript', 'ruby', 'sass', 'xml']
    "}}}
    NeoBundleLazy 'groenewege/vim-less', {'autoload':{'filetypes':['less']}}
    NeoBundleLazy 'othree/html5.vim', {'autoload':{'filetypes':['html']}}
    NeoBundleLazy 'wavded/vim-stylus', {'autoload':{'filetypes':['styl']}}
    NeoBundleLazy 'juvenn/mustache.vim', {'autoload':{'filetypes':['mustache']}}
    NeoBundleLazy 'gregsexton/MatchTag', {'autoload':{'filetypes':['html','xml']}}
    NeoBundleLazy 'mattn/emmet-vim', {'autoload':{'filetypes':['html','xml','xsl','xslt','xsd','css','sass','scss','less','mustache', 'tmpl','smarty']}} "{{{
  "}}}
  "}}}

  " javascript {{{
    " NeoBundleLazy 'marijnh/tern_for_vim', {
    "   \ 'autoload': { 'filetypes': ['javascript'] },
    "   \ 'build': {
    "     \ 'mac': 'npm install',
    "     \ 'unix': 'npm install',
    "     \ 'cygwin': 'npm install',
    "     \ 'windows': 'npm install',
    "   \ },
    " \ }
    NeoBundleLazy 'pangloss/vim-javascript', {'autoload':{'filetypes':['javascript']}}
    NeoBundleLazy 'maksimr/vim-jsbeautify', {'autoload':{'filetypes':['javascript']}} "{{{
      nnoremap <leader>fjs :call JsBeautify()<cr>
    "}}}
    NeoBundleLazy 'leafgarland/typescript-vim', {'autoload':{'filetypes':['typescript']}}
    NeoBundleLazy 'kchmck/vim-coffee-script', {'autoload':{'filetypes':['coffee']}}
    NeoBundleLazy 'mmalecki/vim-node.js', {'autoload':{'filetypes':['javascript']}}
    NeoBundleLazy 'leshill/vim-json', {'autoload':{'filetypes':['javascript','json']}}
  "}}}

  " ruby {{{
    NeoBundle 'vim-ruby/vim-ruby'
    NeoBundle 'tpope/vim-rails'
    NeoBundle 'tpope/vim-bundler'
    NeoBundle 'tpope/vim-rake'
    NeoBundle 'thoughtbot/vim-rspec' "{{{
      map <Leader>rf :call RunCurrentSpecFile()<CR>
      map <Leader>rc :call RunNearestSpec()<CR>
      map <Leader>rl :call RunLastSpec()<CR>
      map <Leader>ra :call RunAllSpecs()<CR>
    "}}}
  "}}}

  " clojure {{{
    NeoBundle 'guns/vim-clojure-static'
    NeoBundle 'tpope/vim-fireplace'
  "}}}

  " python {{{
    NeoBundleLazy 'klen/python-mode', {'autoload':{'filetypes':['python']}} "{{{
      let g:pymode_rope=0
    "}}}
    NeoBundleLazy 'davidhalter/jedi-vim', {'autoload':{'filetypes':['python']}} "{{{
      let g:jedi#popup_on_dot=0
    "}}}
  "}}}

  " scm {{{
    NeoBundle 'tpope/vim-fugitive' "{{{
      nnoremap <silent> <leader>gb :Gblame<CR>
    "}}}
  "}}}

  " autocomplete {{{
    NeoBundle 'Shougo/neosnippet-snippets'
    NeoBundle 'Shougo/neosnippet.vim' "{{{
      let g:neosnippet#snippets_directory='~/.vim/snippets'
      imap <C-k> <Plug>(neosnippet_expand_or_jump)
      smap <C-k> <Plug>(neosnippet_expand_or_jump)
      xmap <C-k> <Plug>(neosnippet_expand_target)
      vmap <C-k> <Plug>(neosnippet_expand_target)
    "}}}
    NeoBundleLazy 'Shougo/neocomplete.vim', {'autoload':{'insert':1}, 'vim_version':'7.3.885'} "{{{
      let g:neocomplete#enable_at_startup=1
      let g:neocomplete#data_directory='~/.vim/cache/neocomplete'
      let g:neocomplete#force_overwrite_completefunc = 1
      let g:neocomplete#max_list = 4
      let g:neocomplete#auto_completion_start_length = 3
      let g:neocomplete#enable_smart_case = 1
      inoremap <expr><C-N>  neocomplete#start_manual_complete()
    "}}}
  "}}}


  " editing {{{
    NeoBundle 'tpope/vim-endwise'
    NeoBundle 'tpope/vim-abolish'
    NeoBundle 'tpope/vim-speeddating'
    NeoBundle 'tpope/vim-commentary'
    NeoBundleLazy 'godlygeek/tabular', {'autoload':{'commands':'Tabularize'}} "{{{
      nnoremap <Leader>ta :Tabularize/
      vnoremap <Leader>ta :Tabularize/
    "}}}
    NeoBundle 'justinmk/vim-sneak' "{{{
      let g:sneak#streak = 1
      let g:sneak#use_ic_scs = 1
    "}}}
  "}}}

  " textobj {{{
    NeoBundle 'kana/vim-textobj-user'
    NeoBundle 'kana/vim-textobj-indent'
    NeoBundle 'kana/vim-textobj-entire'
    NeoBundle 'kana/vim-textobj-line'
    NeoBundle 'bkad/CamelCaseMotion'
    NeoBundle 'nelstrom/vim-textobj-rubyblock'
  "}}}

  " misc {{{
    NeoBundle 'henrik/vim-indexed-search'
    NeoBundle 'skwp/greplace.vim'
    NeoBundle 'scrooloose/syntastic' "{{{
      let g:syntastic_error_symbol = 'e'
      let g:syntastic_style_error_symbol = 'œ'
      let g:syntastic_warning_symbol = 'w'
      let g:syntastic_style_warning_symbol = '≈'
    "}}}
    NeoBundle 'malkomalko/projections.vim'
  "}}}

  " color schemes {{{
    NeoBundle 'altercation/vim-colors-solarized' "{{{
      hi Underlined cterm=bold ctermfg=5
    " }}}
    NeoBundle 'nanotech/jellybeans.vim'
    NeoBundle 'tomasr/molokai'
    NeoBundle 'chriskempson/vim-tomorrow-theme'
    NeoBundle 'chriskempson/base16-vim'
    NeoBundle 'w0ng/vim-hybrid'
    NeoBundle 'croaky/vim-colors-github'
    NeoBundle 'john2x/flatui.vim'
    NeoBundle 'sjl/badwolf'
    NeoBundle 'zeis/vim-kolor'
    NeoBundle 'zeis/vim-kolor'
    NeoBundle 'DAddYE/soda.vim'
  "}}}
"}}}

  call neobundle#end()
" mappings {{{
  nmap <leader>b :b<Space>
  nmap <leader>/ :Gsearch<CR>
  nmap <leader>fef :call Preserve("normal gg=G")<CR>
  nnoremap <leader>ev :split ~/.vim/vimrc<CR>
  nnoremap <leader>sv :source ~/.vimrc<CR>
  nnoremap <leader>h :noh<CR>
  nnoremap <leader>l :set list!<CR>
  nnoremap <silent> <C-S> :update<CR>
  vnoremap <silent> <C-S> <C-C>:update<CR>
  inoremap <silent> <C-S> <Esc>:update<CR>
  nnoremap <silent> <C-E> <C-E>j
  nnoremap <silent> <C-Y> <C-Y>k
  nnoremap <silent> <C-H> ^
  nnoremap <silent> <C-L> $

  " command-line window {{{
    nnoremap q: q:i
    nnoremap q/ q/i
    nnoremap q? q?i
  " }}}

  " folds {{{
    nnoremap zr zr:echo &foldlevel<cr>
    nnoremap zm zm:echo &foldlevel<cr>
    nnoremap zR zR:echo &foldlevel<cr>
    nnoremap zM zM:echo &foldlevel<cr>
  " }}}

  " make Y consistent with C and D. See :help Y.
  nnoremap Y y$

  " hide annoying quit message
  nnoremap <C-c> <C-c>:echo<cr>

  " insert current date
  nnoremap <F6> "=strftime("%Y-%m-%d")<CR>P
  inoremap <F6> <C-R>=strftime("%Y-%m-%d")<CR>

  " abbreviations
  iab filed field
  iab thme theme
  iab resutl result

  " show syntax group
  nnoremap <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
    \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
    \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
  "}}}

set t_Co=256
colorscheme my

filetype plugin indent on
syntax enable
filetype plugin on
