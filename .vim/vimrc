  " NeoBundle init {{{
  if has('vim_starting')
    set nocompatible
    set runtimepath+=~/.vim/bundle/neobundle.vim/
  endif
  call neobundle#begin(expand('~/.vim/bundle/'))
  NeoBundleFetch 'Shougo/neobundle.vim'
  NeoBundleCheck
  "}}}

  " functions {{{
  "
  " a little more informative version of the above
  nmap <Leader>sI :call <SID>SynStack()<CR>

  function! <SID>SynStack()
      if !exists("*synstack")
          return
      endif
      echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
  endfunc

  function! Preserve(command) "{{{
    " preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " do the busine:
    execute a:command
    " clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
  endfunction "}}}
  function! StripTrailingWhitespace() "{{{
    call Preserve("%s/\\s\\+$//e")
  endfunction "}}}
  function! EnsureExists(path) "{{{
    if !isdirectory(expand(a:path))
      call mkdir(expand(a:path))
    endif
  endfunction "}}}
  function! CloseWindowOrKillBuffer() "{{{
    let number_of_windows_to_this_buffer = len(filter(range(1, winnr('$')), "winbufnr(v:val) == bufnr('%')"))

    " never bdelete a nerd tree
    if matchstr(expand("%"), 'NERD') == 'NERD'
      wincmd c
      return
    endif

    if number_of_windows_to_this_buffer > 1
      wincmd c
    else
      bdelete
    endif
  endfunction "}}}
  "}}}

  " base configuration {{{
  set timeoutlen=500                                  "mapping timeout
  set ttimeoutlen=50                                  "keycode timeout

  set mouse=a                                         "enable mouse
  set mousehide                                       "hide when characters are typed
  set history=1000                                    "number of command lines to remember
  set ttyfast                                         "assume fast terminal connection
  set viewoptions=folds,options,cursor,unix,slash     "unix/windows compatibility
  set encoding=utf-8                                  "set encoding for text
  set hidden                                          "allow buffer switching without saving
  set autoread                                        "auto reload if file saved externally
  set fileformats+=mac                                "add mac to auto-detection of file format line endings
  set nrformats-=octal                                "always assume decimal numbers
  set showcmd
  set showfulltag
  set modeline
  set modelines=5

  " whitespace
  set backspace=indent,eol,start                      "allow backspacing everything in insert mode
  set autoindent                                      "automatically indent to match adjacent lines
  set expandtab                                       "spaces instead of tabs
  set smarttab                                        "use shiftwidth to enter tabs
  let &tabstop=2                                      "number of spaces per tab for display
  let &softtabstop=2                                  "number of spaces per tab in insert mode
  let &shiftwidth=2                                   "number of spaces when indenting
  set nolist                                          "highlight whitespace
  set listchars=tab:│\ ,trail:•,extends:❯,precedes:❮
  set shiftround
  set linebreak
  let &showbreak=' ↪ '
  set scrolloff=1                                     "always show content after scroll
  set scrolljump=5                                    "minimum number of lines to scroll
  set display+=lastline

  set splitbelow
  set splitright

  " disable sounds
  set noerrorbells
  set novisualbell
  set t_vb=

  " searching
  set hlsearch                                        "highlight searches
  set incsearch                                       "incremental searching
  set ignorecase                                      "ignore case for searching
  set smartcase                                       "do case-sensitive if there's a capital letter
  set grepprg=ag\ --nogroup\ --column\ --smart-case\ --nocolor\ --follow
  set grepformat=%f:%l:%c:%m

  " vim file/folder management {{{
    " persistent undo
    set undofile
    set undodir=~/.vim/cache/undo

    " backups
    set backup
    set backupdir=~/.vim/cache/backup

    " swap files
    set directory=~/.vim/cache/swap
    set noswapfile

    call EnsureExists('~/.vim/cache')
    call EnsureExists(&undodir)
    call EnsureExists(&backupdir)
    call EnsureExists(&directory)
  "}}}

  let mapleader = ","
  let g:mapleader = ","
"}}}

" ui configuration {{{
  set showmatch                                       "automatically highlight matching braces/brackets/etc.
  set matchtime=2                                     "tens of a second to show matching parentheses
  set number
  set relativenumber
  set lazyredraw
  set laststatus=2
  set noshowmode
  set foldenable                                      "enable folds by default
  set foldmethod=syntax                               "fold via syntax of files
  set foldlevelstart=99                               "open all folds by default
  let g:xml_syntax_folding=1                          "enable xml folding

  set nocursorline

  set fillchars+=vert:\                               "space instead of | as vertical delimiter

  " Filetypes
  autocmd BufRead,BufNewFile *.tpl,*tmpl set filetype=smarty

  " Make the 81st column stand out by Damian Conway
  highlight ColorColumn ctermbg=black
  call matchadd('ColorColumn', '\%81v', 100)
"}}}

    NeoBundle 'Shougo/vimshell'
" plugin/mapping configuration {{{
  " core {{{
    NeoBundle 'matchit.zip'
    NeoBundle 'bling/vim-airline' "{{{
      let g:airline_right_sep = ''
      let g:airline_left_sep = ''
      let g:airline_symbols_branch = '⎇'
      let g:airline#extensions#whitespace#trailing_format = 'trail[%s]'
      let g:airline#extensions#whitespace#mixed_indent_format = 'mix[%s]'
    "}}}
    NeoBundle 'tpope/vim-surround' "{{{
      let g:surround_100 = "do \r\nend" "surround letter 'd' for do .. end
    "}}}
    NeoBundle 'tpope/vim-repeat'
    NeoBundle 'tpope/vim-eunuch'
    NeoBundle 'tpope/vim-unimpaired'
    NeoBundle 'Shougo/vimproc.vim', {
      \ 'build': {
        \ 'mac': 'make -f make_mac.mak',
        \ 'unix': 'make -f make_unix.mak',
        \ 'cygwin': 'make -f make_cygwin.mak',
        \ 'windows': '"C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC\bin\nmake.exe" make_msvc32.mak',
      \ },
    \ }
  "}}}
  
  " web {{{
    NeoBundleLazy 'tpope/vim-markdown', {'autoload':{'filetypes':['markdown']}} "{{{
      au BufNewFile,BufRead *.md,*.note  setf markdown
      let g:markdown_fenced_languages = ['css', 'erb=eruby', 'javascript', 'js=javascript', 'json=javascript', 'ruby', 'sass', 'xml']
    "}}}
    NeoBundleLazy 'groenewege/vim-less', {'autoload':{'filetypes':['less']}}
    NeoBundleLazy 'cakebaker/scss-syntax.vim', {'autoload':{'filetypes':['scss','sass']}}
    NeoBundleLazy 'hail2u/vim-css3-syntax', {'autoload':{'filetypes':['css','scss','sass']}}
    NeoBundleLazy 'othree/html5.vim', {'autoload':{'filetypes':['html']}}
    NeoBundleLazy 'wavded/vim-stylus', {'autoload':{'filetypes':['styl']}}
    NeoBundleLazy 'juvenn/mustache.vim', {'autoload':{'filetypes':['mustache']}}
    NeoBundleLazy 'vim-scripts/smarty.vim', {'autoload':{'filetypes':['tmpl','tpl']}}
    NeoBundleLazy 'gregsexton/MatchTag', {'autoload':{'filetypes':['html','xml']}}
    NeoBundleLazy 'mattn/emmet-vim', {'autoload':{'filetypes':['html','xml','xsl','xslt','xsd','css','sass','scss','less','mustache', 'tmpl']}} "{{{
      " let g:user_emmet_settings = {
      " \  'lang' : 'coffee',
      " \  'html' : {
      " \    'filters' : 'html',
      " \    'indentation' : '  '
      " \  },
      " \}
      function! s:zen_html_tab()
        let line = getline('.')
        if match(line, '<.*>') < 0
          return "\<c-y>,"
        endif
        return "\<c-y>n"
      endfunction
      " autocmd FileType xml,xsl,xslt,xsd,css,sass,scss,less,mustache imap <buffer><tab> <c-y>,
      " autocmd FileType html imap <buffer><expr><tab> <sid>zen_html_tab()
    autocmd BufNewFile,BufRead *.hamlc setf haml
  "}}}
  "}}}

  " javascript {{{
    " NeoBundleLazy 'marijnh/tern_for_vim', {
    "   \ 'autoload': { 'filetypes': ['javascript'] },
    "   \ 'build': {
    "     \ 'mac': 'npm install',
    "     \ 'unix': 'npm install',
    "     \ 'cygwin': 'npm install',
    "     \ 'windows': 'npm install',
    "   \ },
    " \ }
    NeoBundleLazy 'pangloss/vim-javascript', {'autoload':{'filetypes':['javascript']}}
    NeoBundleLazy 'maksimr/vim-jsbeautify', {'autoload':{'filetypes':['javascript']}} "{{{
      nnoremap <leader>fjs :call JsBeautify()<cr>
    "}}}
    NeoBundleLazy 'leafgarland/typescript-vim', {'autoload':{'filetypes':['typescript']}}
    NeoBundleLazy 'kchmck/vim-coffee-script', {'autoload':{'filetypes':['coffee']}}
    NeoBundleLazy 'mmalecki/vim-node.js', {'autoload':{'filetypes':['javascript']}}
    NeoBundleLazy 'leshill/vim-json', {'autoload':{'filetypes':['javascript','json']}}
    NeoBundleLazy 'othree/javascript-libraries-syntax.vim', {'autoload':{'filetypes':['javascript','coffee','ls','typescript']}}
  "}}}
  
  " ruby {{{
    NeoBundle 'vim-ruby/vim-ruby'
    NeoBundle 'tpope/vim-rails'
    NeoBundle 'tpope/vim-bundler'
    NeoBundle 'tpope/vim-rake'
    NeoBundle 'thoughtbot/vim-rspec' "{{{
      map <Leader>rf :call RunCurrentSpecFile()<CR>
      map <Leader>rc :call RunNearestSpec()<CR>
      map <Leader>rl :call RunLastSpec()<CR>
      map <Leader>ra :call RunAllSpecs()<CR>
    "}}}
  "}}}
  
  " python {{{
    NeoBundleLazy 'klen/python-mode', {'autoload':{'filetypes':['python']}} "{{{
      let g:pymode_rope=0
    "}}}
    NeoBundleLazy 'davidhalter/jedi-vim', {'autoload':{'filetypes':['python']}} "{{{
      let g:jedi#popup_on_dot=0
    "}}}
  "}}}
  
  " scm {{{
    NeoBundle 'mhinz/vim-signify' "{{{
      let g:signify_update_on_bufenter = 0
      let g:signify_disable_by_default = 1
      " nmap <leader>gt :SignifyToggle
    "}}}
    if executable('hg')
      NeoBundle 'bitbucket:ludovicchabant/vim-lawrencium'
    endif
    NeoBundle 'tpope/vim-fugitive' "{{{
      nnoremap <silent> <leader>gs :Gstatus<CR>
      nnoremap <silent> <leader>gd :Gdiff<CR>
      nnoremap <silent> <leader>gc :Gcommit<CR>
      nnoremap <silent> <leader>gb :Gblame<CR>
      nnoremap <silent> <leader>gl :Glog<CR>
      nnoremap <silent> <leader>gp :Git push<CR>
      nnoremap <silent> <leader>gw :Gwrite<CR>
      nnoremap <silent> <leader>gr :Gremove<CR>
      autocmd FileType gitcommit nmap <buffer> U :Git checkout -- <C-r><C-g><CR>
      autocmd BufReadPost fugitive://* set bufhidden=delete
    "}}}
    NeoBundleLazy 'gregsexton/gitv', {'depends':['tpope/vim-fugitive'], 'autoload':{'commands':'Gitv'}} "{{{
      nnoremap <silent> <leader>gv :Gitv<CR>
      nnoremap <silent> <leader>gV :Gitv!<CR>
    "}}}
  "}}}

  " autocomplete {{{
    NeoBundle 'Shougo/neosnippet-snippets'
    NeoBundle 'Shougo/neosnippet.vim' "{{{
      let g:neosnippet#snippets_directory='~/.vim/snippets'
      imap <C-k> <Plug>(neosnippet_expand_or_jump)
      smap <C-k> <Plug>(neosnippet_expand_or_jump)
      xmap <C-k> <Plug>(neosnippet_expand_target)
      vmap <C-k> <Plug>(neosnippet_expand_target)
    "}}}
    NeoBundleLazy 'Shougo/neocomplete.vim', {'autoload':{'insert':1}, 'vim_version':'7.3.885'} "{{{
      let g:neocomplete#enable_at_startup=1
      let g:neocomplete#data_directory='~/.vim/cache/neocomplete'
      let g:neocomplete#force_overwrite_completefunc = 1
      let g:neocomplete#max_list = 4
      let g:neocomplete#auto_completion_start_length = 2
      let g:neocomplete#enable_smart_case = 1
    "}}}
  "}}}

  " editing {{{
    NeoBundle 'tpope/vim-endwise'
    NeoBundle 'tpope/vim-abolish'
    NeoBundle 'tpope/vim-speeddating'
    NeoBundle 'tpope/vim-commentary'
    NeoBundle 'terryma/vim-expand-region'
    " NeoBundle 'terryma/vim-multiple-cursors'
    " NeoBundle 'chrisbra/NrrwRgn'
    NeoBundleLazy 'godlygeek/tabular', {'autoload':{'commands':'Tabularize'}} "{{{
      nnoremap <Leader>ta :Tabularize/
      vnoremap <Leader>ta :Tabularize/
    "}}}
    NeoBundle 'justinmk/vim-sneak' "{{{
      let g:sneak#streak = 1
      let g:sneak#use_ic_scs = 1
    "}}}
  "}}}

  " navigation {{{
    NeoBundleLazy 'Shougo/vimfiler', {'autoload':{'commands':['VimFiler','VimFilerDir']}} "{{{
      nnoremap <Leader>m :VimFiler -explorer<CR>
      nnoremap <Leader>n :VimFiler -find -explorer<CR>
      let g:vimfiler_tree_leaf_icon = " "
      let g:vimfiler_tree_closed_icon = "▸"
      let g:vimfiler_tree_opened_icon = "▾"
      let g:vimfiler_tree_leaf_icon = "|"
      let g:vimfiler_tree_indentation = 1
      let g:vimfiler_expand_jump_to_first_child = 0
      autocmd FileType vimfiler nmap <buffer><silent> <2-LeftMouse> :call <SID>vimfiler_on_double_click()<CR>
      function! s:vimfiler_on_double_click()
        let context = vimfiler#get_context()
        if context.explorer
          let mapping = vimfiler#mappings#smart_cursor_map(
                \ "\<Plug>(vimfiler_expand_tree)",
                \ "\<Plug>(vimfiler_edit_file)"
                \ )
        else
          let mapping = vimfiler#mappings#smart_cursor_map(
                \ "\<Plug>(vimfiler_cd_file)",
                \ "\<Plug>(vimfiler_edit_file)"
                \ )
        endif
        execute "normal " . mapping
      endfunction
    "}}}
    NeoBundleLazy 'scrooloose/nerdtree', {'autoload':{'commands':['NERDTreeToggle','NERDTreeFind']}} "{{{
      let NERDTreeShowHidden=1
      let NERDTreeQuitOnOpen=0
      let NERDTreeChDirMode=0
      let NERDTreeIgnore=['\.git','\.hg']
      let NERDTreeBookmarksFile=expand('~/.vim/cache/NERDTreeBookmarks')
      " nnoremap <Leader>m :NERDTreeToggle<CR>
      " nnoremap <Leader>n :NERDTreeFind<CR>
    "}}}
  "}}}
  
  " unite {{{
    NeoBundle 'Shougo/unite.vim' "{{{
      let bundle = neobundle#get('unite.vim')
      function! bundle.hooks.on_source(bundle)
        call unite#filters#matcher_default#use(['matcher_fuzzy'])
        call unite#filters#sorter_default#use(['sorter_rank'])
        call unite#set_profile('files', 'context.smartcase', 1)
        call unite#custom#source('line,outline','matchers','matcher_fuzzy')
      endfunction

      let g:unite_data_directory='~/.vim/cache/unite'
      let g:unite_enable_start_insert=1
      let g:unite_source_history_yank_enable=1
      let g:unite_source_rec_max_cache_files=5000
      let g:unite_prompt='» '
      let g:unite_winheight=10

      let g:unite_source_grep_command='ag'
      let g:unite_source_grep_default_opts='--nocolor --nogroup -S -U'
      let g:unite_source_grep_recursive_opt=''

      let g:unite_source_buffer_time_format = ''

      function! s:unite_settings()
        nmap <buffer> Q <plug>(unite_exit)
        nmap <buffer> <esc> <plug>(unite_exit)
        imap <buffer> <esc> <plug>(unite_exit)
        nmap <buffer> <C-U> <plug>(unite_redraw)
        imap <buffer> <C-U> <plug>(unite_redraw)
        nmap <buffer> <leader>o <plug>(unite_toggle_auto_preview)
      endfunction
      autocmd FileType unite call s:unite_settings()

      nmap <space> [unite]
      nnoremap [unite] <nop>

      nnoremap <silent> [unite]<space> :<C-u>Unite -toggle -auto-resize -buffer-name=mixed -hide-source-names buffer bookmark file_rec/async:!<cr><c-u>
      nnoremap <silent> [unite]f :<C-u>Unite -toggle -auto-resize -buffer-name=files file_rec/async:!<cr><c-u>
      nnoremap <silent> [unite]r :<C-u>Unite -toggle -auto-resize -buffer-name=recent file_mru<cr>
      nnoremap <silent> [unite]p :<C-u>Unite -toggle -auto-resize -buffer-name=yanks history/yank<cr>
      nnoremap <silent> [unite]l :<C-u>Unite -toggle -auto-resize -buffer-name=line line<cr>
      nnoremap <silent> [unite]b :<C-u>Unite -toggle -auto-resize -buffer-name=buffers buffer<cr>
      nnoremap <silent> [unite]/ :<C-u>Unite -toggle -auto-resize -buffer-name=search -max-multi-lines=0 grep:.<cr>
      nnoremap <silent> [unite]m :<C-u>Unite -toggle -auto-resize -buffer-name=mappings mapping<cr>
      nnoremap <silent> [unite]e :<C-u>Unite -toggle -auto-resize resume<cr>

      nnoremap <silent> [unite]q<space> :<C-u>Unite -no-quit -toggle -auto-resize -buffer-name=mixed buffer bookmark file_rec/async:!<cr><c-u>
      nnoremap <silent> [unite]qf :<C-u>Unite -no-quit -toggle -auto-resize -buffer-name=files file_rec/async:!<cr><c-u>
      nnoremap <silent> [unite]qr :<C-u>Unite -no-quit -toggle -auto-resize -buffer-name=recent file_mru<cr>
      nnoremap <silent> [unite]qp :<C-u>Unite -no-quit -toggle -auto-resize -buffer-name=yanks history/yank<cr>
      nnoremap <silent> [unite]ql :<C-u>Unite -no-quit -toggle -auto-resize -buffer-name=line line<cr>
      nnoremap <silent> [unite]qb :<C-u>Unite -no-quit -toggle -auto-resize -buffer-name=buffers buffer<cr>
      nnoremap <silent> [unite]q/ :<C-u>Unite -no-quit -toggle -auto-resize -buffer-name=search -max-multi-lines=0 grep:.<cr>
      nnoremap <silent> [unite]qm :<C-u>Unite -no-quit -toggle -auto-resize -buffer-name=mappings mapping<cr>
      nnoremap <silent> [unite]qe :<C-u>Unite -no-quit -toggle -auto-resize resume<cr>

    "}}}
    NeoBundleLazy 'Shougo/neomru.vim', {'autoload':{'unite_sources':'file_mru'}}
    NeoBundleLazy 'h1mesuke/unite-outline', {'autoload':{'unite_sources':'outline'}}
    NeoBundleLazy 'tsukkee/unite-tag', {'autoload':{'unite_sources':['tag','tag/file']}} "{{{
      nnoremap <silent> [unite]t :<C-u>Unite -auto-resize -buffer-name=tag tag tag/file<cr>
    "}}}
    NeoBundleLazy 'Shougo/unite-outline', {'autoload':{'unite_sources':'outline'}} "{{{
      " Tagbar
      nnoremap <silent> [unite]o :<C-u>Unite -toggle -auto-resize -buffer-name=outline outline<cr>
      nnoremap <silent> [unite]qo :<C-u>Unite -no-quit -toggle -auto-resize -buffer-name=outline outline<cr>
    "}}}
    NeoBundleLazy 'Shougo/unite-help', {'autoload':{'unite_sources':'help'}} "{{{
      nnoremap <silent> [unite]h :<C-u>Unite -auto-resize -buffer-name=help help<cr>
    "}}}
  "}}}

  " textobj {{{
    NeoBundle 'kana/vim-textobj-user'
    NeoBundle 'kana/vim-textobj-indent'
    NeoBundle 'kana/vim-textobj-entire'
    NeoBundle 'lucapette/vim-textobj-underscore'
    NeoBundle 'nelstrom/vim-textobj-rubyblock'
  "}}}

  " misc {{{
    NeoBundle 'henrik/vim-indexed-search'
    NeoBundle 'thinca/vim-qfreplace'
    NeoBundle 'scrooloose/syntastic' "{{{
      let g:syntastic_error_symbol = '✗'
      let g:syntastic_style_error_symbol = '✠'
      let g:syntastic_warning_symbol = '∆'
      let g:syntastic_style_warning_symbol = '≈'
    "}}}
  "}}}

  " color schemes {{{
    NeoBundle 'altercation/vim-colors-solarized' "{{{
      hi Underlined cterm=bold ctermfg=5
    " }}}
    NeoBundle 'nanotech/jellybeans.vim'
    NeoBundle 'tomasr/molokai'
    NeoBundle 'chriskempson/vim-tomorrow-theme'
    NeoBundle 'chriskempson/base16-vim'
    NeoBundle 'w0ng/vim-hybrid'
    NeoBundle 'croaky/vim-colors-github'
    NeoBundle 'john2x/flatui.vim'
    NeoBundle 'sjl/badwolf'
    NeoBundle 'zeis/vim-kolor' "{{{
      let g:kolor_underlined=1
    "}}}
  "}}}
"}}}

  call neobundle#end()
" mappings {{{
  nmap <leader>fef :call Preserve("normal gg=G")<CR>
  nnoremap <leader>ev :split ~/.vim/vimrc<CR>
  nnoremap <leader>sv :source ~/.vimrc<CR>
  nnoremap <leader>h :noh<CR>
  nnoremap <leader>l :set list!<CR>
  inoremap kj <Esc>
  inoremap jk <Esc>
  nnoremap <silent> <C-S> :update<CR>
  vnoremap <silent> <C-S> <C-C>:update<CR>
  inoremap <silent> <C-S> <Esc>:update<CR>
  nmap <leader>f$ :call StripTrailingWhitespace()<CR>
  nnoremap <silent> <C-E> <C-E>j
  nnoremap <silent> <C-Y> <C-Y>k
  nnoremap <silent> <C-H> ^
  nnoremap <silent> <C-L> $

  " command-line window {{{
    nnoremap q: q:i
    nnoremap q/ q/i
    nnoremap q? q?i
  " }}}

  " folds {{{
    nnoremap zr zr:echo &foldlevel<cr>
    nnoremap zm zm:echo &foldlevel<cr>
    nnoremap zR zR:echo &foldlevel<cr>
    nnoremap zM zM:echo &foldlevel<cr>
  " }}}

  " screen line scroll {{{
    nnoremap <silent> j gj
    nnoremap <silent> k gk
  " }}}
  
  " make Y consistent with C and D. See :help Y.
  nnoremap Y y$

  " hide annoying quit message
  nnoremap <C-c> <C-c>:echo<cr>

  " window killer
  nnoremap <silent> Q :call CloseWindowOrKillBuffer()<cr>

  " insert current date
  nnoremap <F6> "=strftime("%Y-%m-%d")<CR>P
  inoremap <F6> <C-R>=strftime("%Y-%m-%d")<CR>

  " zeal integration
  nnoremap gz :!zeal --query "<cword>"&<CR><CR>
  "}}}

set background=dark
if !empty(glob('~/.vim/light_background.vim'))
  source ~/.vim/light_background.vim
endif
set t_Co=16
colorscheme solarized

 " Turn off most colors {{{
  exe "hi! link Identifier Normal"
  exe "hi! link Statement Normal"
  hi! link Type Normal
  hi! link Underlined Normal
  hi! link Todo Normal
  hi! link SpecialKey Normal
  hi! link NonText Normal
 " }}}

filetype plugin indent on
syntax enable
filetype plugin on
